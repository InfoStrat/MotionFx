Texture2D InputTexture : register(t0);

SamplerState TextureSampler : register(s0)
{
	Filter = MIN_MAG_MIP_POINT;
	AddressU = Clamp;
	AddressV = Clamp;
};

cbuffer psconstants0 : register(b0)
{
	float4 tint : packoffset(c0);
};

cbuffer PSConstants1 : register(b1)
{
	float MinThreshold : packoffset(c0);
};

cbuffer PSConstants2 : register(b2)
{
	float MaxThreshold : packoffset(c0);
};

cbuffer PSConstants2 : register(b3)
{
	float MinValue : packoffset(c0);
};

cbuffer PSConstants2 : register(b4)
{
	float MaxValue : packoffset(c0);
};

struct PSInput
{
    float4 PositionCS : SV_Position;
    float2 TexCoord : TEXCOORD;
};

float Unpack(float4 value)
{
	return value.b * 256 + value.g * 256 * 256;
}

float4 Convert(in PSInput input)
{
    float2 texCoord = input.TexCoord;

	float4 sample = InputTexture.Sample(TextureSampler, texCoord);
	float value = Unpack(sample);
	
	if (value < MinThreshold ||
		value > MaxThreshold)
	{
		return float4(0, 0, 0, 1);
	}
	float minV = max(MinThreshold, MinValue);
	float maxV = min(MaxThreshold, MaxValue);
	float newValue = 1 - ((value - minV) / (maxV - minV));
	return float4(newValue, newValue, newValue, sample.a);
}

float4 ColorMapDepthMain(in PSInput input) : SV_Target
{
	return Convert(input);
}
