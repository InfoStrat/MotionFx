Texture2D InputTexture : register(t0);

SamplerState TextureSampler : register(s0)
{
	Filter = MIN_MAG_MIP_POINT;
	AddressU = Clamp;
	AddressV = Clamp;
};

cbuffer psconstants0 : register(b0)
{
	float4 tint : packoffset(c0);
};

cbuffer PSConstants1 : register(b1)
{
	float MinThreshold : packoffset(c0);
};

cbuffer PSConstants2 : register(b2)
{
	float MaxThreshold : packoffset(c0);
};

cbuffer PSConstants2 : register(b3)
{
	float MinValue : packoffset(c0);
};

cbuffer PSConstants2 : register(b4)
{
	float MaxValue : packoffset(c0);
};

cbuffer PSConstants5 : register(b5)
{
	float TexSizeX : packoffset(c0);
}

cbuffer PSConstants5 : register(b6)
{
	float TexSizeY : packoffset(c0);
}

struct PSInput
{
    float4 PositionCS : SV_Position;
    float2 TexCoord : TEXCOORD;
};

float Unpack(float4 value)
{
	return value.b * 256 + value.g * 256 * 256;
}


float4 GetSample(float2 input)
{
    int index = TexSizeX * (0.5 + input.x + input.y * TexSizeY);
    bool alternatePositionFlag = fmod(index, 2) != 0;

    int newIndex = floor(index / 2);
    float normIndex = newIndex / TexSizeX;
    float y = floor(normIndex);
    float2 coord = float2(normIndex - y, y / TexSizeY);
	
    float4 sample = InputTexture.Sample(TextureSampler, coord);
    
    if (alternatePositionFlag)
        sample = float4(0, sample.a, sample.r, 1);
    else
        sample = float4(0, sample.g, sample.b, 1);

    float value = Unpack(sample);
    if (value < 100)
    {
        sample = float4(0, 1, 1, 1);
    }

    return sample;
}

float4 UnpackDepthMain(in PSInput input) : SV_Target
{
    float2 texCoord = input.TexCoord;
    return GetSample(texCoord);
}
